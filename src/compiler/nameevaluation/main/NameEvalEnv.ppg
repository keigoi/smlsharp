(**
 * @copyright (c) 2012- Tohoku University.
 * @author Atsushi Ohori
 *)
(* the initial error code of this file : V-001
  The printer prefix "printTy_" is used to print types and signature 
  in the interactive mode.
 *)
structure NameEvalEnv =
struct
local
  structure I = IDCalc
  structure E = NameEvalError
  structure EU = UserErrorUtils
  fun bug s = Bug.Bug ("NameEvalEnv: " ^ s)

  (*%
      @formatter(I.tfun) I.print_tfun
   *)
  (*% @prefix printTy_
      @params(mode,name)
      @formatter(I.tfun) I.print_tfun
   *)
  type tfun
    = 
      (*%
          @format(x)  x()(,)
       *) 
      (*% @prefix printTy_
          @format(x)  x()(mode,name)
       *) 
      I.tfun

  (*%
      @formatter(I.conSpec) I.print_conSpec
   *)
  (*% @prefix printTy_
      @formatter(I.conSpec) I.print_conSpec
   *)
  type conSpec
    = 
      (*%
         @format(x)  x()(,)
       *) 
      (*% @prefix printTy_
         @format(x)  x()(,)
       *) 
      I.conSpec

  (*%
      @formatter(I.formals) I.print_formals
   *)
  (*% @prefix printTy_
      @formatter(I.formals) I.print_formals
   *)
  type formals
    = 
      (*%
         @format(x)  x
       *)
      (*% @prefix printTy_
         @format(x)  x
       *)
      I.formals

  (*%
      @formatter(I.varE) I.format_varE
   *)
  (*% @prefix printTy_
      @formatter(I.varE) I.print_varE
   *)
  type varE
    = 
      (*%
          @format(x)  x
       *)
      (*% @prefix printTy_
          @format(x)
            x()(,)
       *)
      I.varE

  (*%
      @formatter(I.typId) I.print_typId
   *)
  (*% @prefix printTy_
      @formatter(I.typId) I.print_typId
   *)
  type typId
     = 
       (*%
          @format(x)  x
        *) 
       (*% @prefix printTy_
          @format(x)  x
        *) 
       I.typId

  (*%
      @formatter(I.exnId) I.print_exnId
   *)
  (*% @prefix printTy_
      @formatter(I.exnId) I.print_exnId
   *)
  type exnId
    = 
      (*%
          @format(x)  x
       *) 
      (*% @prefix printTy_
          @format(x)  x
       *) 
      I.exnId

  (*%
      @formatter(StructureID.id) StructureID.format_id
   *)
  (*% @prefix printTy_
      @formatter(StructureID.id) StructureID.format_id
   *)
  (* structure name *)
  type structureId 
    = 
      (*%
          @format(id) "s" id
       *)
      (*% @prefix printTy_
          @format(id) "s" id
       *)
      StructureID.id

  (*%
     @formatter(FunctorID.id) FunctorID.format_id
   *)
  (*% @prefix printTy_
     @formatter(FunctorID.id) FunctorID.format_id
   *)
  (* functor name *)
  type functorId
    = 
      (*%
         @format(id) "f" id
       *)
      (*% @prefix printTy_
         @format(id) "f" id
       *)
      FunctorID.id

  (*%
      @formatter(I.tvar) I.print_tvar
   *)
  (*% @prefix printTy_
      @formatter(I.tvar) I.print_tvar
   *)
  type tvar
    = 
      (*%
          @format(x)  x
       *)
      (*% @prefix printTy_
          @format(x)  x
       *)
      I.tvar
  (*%
     @formatter(I.ty) I.print_ty
   *)
  (*% @prefix printTy_
     @formatter(I.ty) I.print_ty
   *)
  type ty
    = 
      (*%
         @format(x)  x()(,)
       *)
      (*% @prefix printTy_
         @format(x)  x()(,)
       *)
      I.ty

  (*%
      @formatter(I.varInfo) I.print_varInfo
    *)
  (*% @prefix printTy_
      @formatter(I.varInfo) I.print_varInfo
    *)
  type varInfo
    = 
      (*%
          @format(x)  x
       *)
      (*% @prefix printTy_
          @format(x)  x
       *)
      I.varInfo

  fun formatEnclosedSet listItems (format, lparen, comma, rparen) map =
      TermFormat.formatOptionalList
        (fn value => format value, lparen, comma, rparen)
        (listItems map)

  fun formatEnclosedTypidSet (lparen, comma, rparen)  map =
      formatEnclosedSet
        TypID.Set.listItems 
        (format_typId, lparen, comma, rparen)
        map
  fun formatEnclosedExnIdSet (lparen, comma, rparen)  map =
      formatEnclosedSet
        ExnID.Set.listItems 
        (format_exnId, lparen, comma, rparen)
        map

  fun preferSecond arg =
      case arg of
        (NONE, SOME (key2, v2)) => (key2, v2)
      | (SOME (key1, v1), NONE) => (key1, v1)
      | (SOME _, SOME (key2, v2)) => (key2, v2)
      | (NONE, NONE) => raise bug "none in unionWith3"

in
  (*%
     @formatter(bool) SmlppgUtil.formatBinaryChoice
   *)
  (*% @prefix printTy_
     @formatter(bool) SmlppgUtil.formatBinaryChoice
     @params(mode,name)
   *)
   (* type structure *)
  datatype tstr 
    = 
      (*%
        @format(tfun) 
          1["tystr" +1 tfun]
       *)
      (*% @prefix printTy_
        @format(tfun) {tfun()(,name)}
       *)
       TSTR of tfun
    | 
      (*%
        @format({tfun, varE, formals, conSpec})
          "dtystr"
            +
          "{" 
             1[ 
               +1
                1["tfun:"+1 tfun]
               +1             
                1["varE:"+1 varE]
               +1
                1["formals:"+1 formals]
               +1
                1["conSpec:"+1 conSpec]
              ]
             1
           "}"
       *)
      (*% @prefix printTy_
        @format({tfun, varE, formals, conSpec})
           {tfun()("dty",name)}
       *)
       TSTR_DTY of {tfun:tfun, varE:varE, formals:formals, conSpec:conSpec}

  (*%
     @formatter(SymbolEnv.map) TermFormat.formatEnclosedSymbolEnvPlain
   *)
  (*% @prefix printTy_
     @formatter(SymbolEnv.map) SmlppgUtil.formatGenericSymbolMap
   *)
  (* type environment *)
  type tyE
    = 
      (*%
        @format(tstr senv) 
          "{"
           1[
             senv(tstr)(1, ":"+)
            ]
           1
          "}"
       *)
      (*% @prefix printTy_
        @format(tstr senv) 
           senv(tstr)(\n,\n,)
       *)
      tstr SymbolEnv.map


  (*%
     @formatter(SymbolEnv.map) TermFormat.formatEnclosedSsymbolEnvPlain
   *)
  (*% @prefix printTy_
     @formatter(SymbolEnv.map) TermFormat.formatEnclosedSymbolEnvPlain
   *)
  (* structure environment *)
  datatype strKind 
    = 
      (*%
        @format "sig"
       *)
      (*% @prefix printTy_
        @format "sig"
       *)
      SIGENV 
    | 
      (*%
        @format(id) "structure(" id ")" 
       *)
      (*% @prefix printTy_
        @format(id) "structure(" id ")" 
       *)
      STRENV of structureId
    | 
      (*%
        @format({id,funId,argId}) "structure(" id "=" funId "(" argId")" ")" 
       *)
      (*% @prefix printTy_
        @format({id,funId,argId}) "structure(" id "=" funId "(" argId")" ")" 
       *)
      FUNAPP of {id:structureId, funId:functorId, argId:structureId}
    | 
      (*%
        @format(id) "structureInFunarg(" id ")" 
       *)
      (*% @prefix printTy_
        @format(id) "structureInFunarg(" id ")" 
       *)
      FUNARG of structureId

  (*%
     @formatter(SymbolEnv.map) TermFormat.formatEnclosedSymbolEnvPlain
   *)
  (*% @prefix printTy_
     @formatter(SymbolEnv.map) SmlppgUtil.formatSymbolMapWithEnclosure
   *)
  (* structure environment *)
  datatype strE
    = 
      (*%
         @format(strEntry senv)
          "{"
           1[
             senv(strEntry)(1, ":"+1)
            ]
           1
          "}"
       *)
      (*% @prefix printTy_
         @format(strEntry senv)
           senv(strEntry)(+":"+1, ~2[\n "and" +], \n "structure" +,)
       *)
      STR of strEntry SymbolEnv.map

  and env
    = 
      (*%
         @format({varE, tyE, strE}) 
          "{"
           1[
             +1
              1["tyE:"+1 tyE]
             +1
              1["strE:"+1 strE]
             +1
              1["varE:"+1 varE]
            ]
           +1
           "}"
       *)
      (*% @prefix printTy_
         @format({varE, tyE, strE}) 
          "sig"
           2[
             tyE
             varE
             strE
            ]
          \n
          "end"
       *)
      ENV of {varE: varE, tyE: tyE, strE: strE}

  withtype strEntry 
    = 
      (*%
        @format({env, strKind}) "("strKind")" + env
       *)
      (*% @prefix printTy_
        @format({env, strKind}) 
          env
       *)
      {env:env, strKind:strKind}

  (*%
     @formatter(Symbol.symbol) Symbol.format_symbol
     @formatter(I.icexp) I.print_icexp
     @formatter(TypID.Set.set) formatEnclosedTypidSet
     @formatter(ExnID.Set.set) formatEnclosedExnIdSet
   *)
  (*% @prefix printTy_
     @formatter(Symbol.symbol) Symbol.format_symbol
     @formatter(I.icexp) I.print_icexp
     @formatter(TypID.Set.set) formatEnclosedTypidSet
     @formatter(ExnID.Set.set) formatEnclosedExnIdSet
   *)
  type funEEntry
    = 
      (*%
        @format({id,
                 version,
                 used,
                 argSigEnv,
                 argStrEntry,
                 argStrName,
                 dummyIdfunArgTy:dummyId opt,
                 polyArgTys:argTy argTys,
                 typidSet,
                 exnIdSet,
                 bodyEnv,
                 bodyVarExp})
           "(" id ") {"
           1[+1
             {1["argSigEnv:"+1 argSigEnv]}
             +1
             {1["argStrEntry:"+1 argStrEntry]}
             +1 "argStrName:" argStrName
             +1
             {1["dummyIdfunArgTy:"+1 opt(dummyId)]}
             +1
             {1["polyArgTys:"+1 "[" argTys(argTy)(",") "]" ]}
             +1 
             {1["typidSet:"+1 typidSet()("(",",",") ") ]}
             +1 
             {1["exnIdSet:"+1 exnIdSet()("(",",",") ") ]}
             +1
             {1["bodyEnv:"+1 bodyEnv]}
             +1
             {1["bodyVarExp:"+1 bodyVarExp()(,)]}
           ]
           +1
           "}"
         *)
      (*% @prefix printTy_
        @format({id,
                 version,
                 used,
                 argSigEnv,
                 argStrEntry,
                 argStrName,
                 dummyIdfunArgTy:dummyId opt,
                 polyArgTys:argTy argTys,
                 typidSet,
                 exnIdSet,
                 bodyEnv,
                 bodyVarExp})
              2[
                \n
                "(" argSigEnv ")" 
                 +1
                 "="
                 2[\n bodyEnv]
              ]
         *)
       {id: functorId,
        version: int option,
        used : bool ref,
        argSigEnv: env,
        argStrEntry: strEntry,
        argStrName: Symbol.symbol,
        dummyIdfunArgTy: ty option,
        polyArgTys: ty list,
        typidSet: TypID.Set.set,
        exnIdSet: ExnID.Set.set,
        bodyEnv: env,
        bodyVarExp: I.icexp (* varInfo *)
       }


  (*%
    @formatter(SymbolEnv.map) TermFormat.formatEnclosedSymbolEnvPlain
   *)
  (*% @prefix printTy_
    @formatter(SymbolEnv.map) TermFormat.formatEnclosedSymbolEnvPlain
   *)
  type funE
    = 
      (*%
         @format(funEEntry senv)
          "{"
           1[
             senv(funEEntry)(1, +":"+1)
            ]
           1
          "}"
       *)
      (*% @prefix printTy_
         @format(funEEntry senv)
          "{"
           1[
             senv(funEEntry)(1, +":"+1)
            ]
           1
          "}"
       *)
      funEEntry SymbolEnv.map
         
  (*%
    @formatter(SymbolEnv.map) TermFormat.formatEnclosedSymbolEnvPlain
   *)
  (*% @prefix printTy_
     @formatter(SymbolEnv.map) SmlppgUtil.formatSymbolMap
   *)
  type sigE
    = 
      (*%
         @format(env senv)  senv(env)(+1"and"+, ":")
       *)
      (*% @prefix printTy_
         @format(env senv)
          2[
            senv(env)("signature" + ,+"="+,~2[+1 "and"+],)
          ]
       *)
      env SymbolEnv.map

  (*%
     @formatter(Symbol.symbol) Symbol.format_symbol
   *)
  (*% @prefix printTy_
     @formatter(Symbol.symbol) Symbol.format_symbol
   *)
  type sigEList 
    = (*%
         @format(sige siges)
       *)
      (*% @prefix printTy_
         @format(sige siges)
           siges(sige)(\n)
         @format:sige(name * env)
          2[
            "signature" + name + "="
            \n
            env
           ]
       *)
    (Symbol.symbol * env) list

  (*%
   *)
  (*% @prefix printTy_
   *)
  type topEnv
    = 
      (*%
        @format({Env, FunE, SigE})
         Env
         +1
         FunE
         +1
         SigE
       *)
      (*% @prefix printTy_
        @format({Env, FunE, SigE})
          "*** topEnv printer is not used at runtime ***"
       *)
    {Env:env, FunE:funE, SigE: sigE}

  fun tstrFormals tstr =
      case tstr of 
       TSTR tfun => I.tfunFormals tfun
     | TSTR_DTY {tfun,...} => I.tfunFormals tfun

  fun tstrLiftedTys tstr =
      case tstr of 
       TSTR tfun => I.tfunLiftedTys tfun
     | TSTR_DTY {tfun,...} => I.tfunLiftedTys tfun

  fun tstrArity tstr = List.length (tstrFormals tstr)

  fun tstrToString tstr =
      Bug.prettyPrint (format_tstr tstr)
  fun tyEToString tyE =
      Bug.prettyPrint (format_tyE tyE)
  fun envToString env = 
      Bug.prettyPrint (format_env env)
  fun topEnvToString (env:topEnv) = 
      Bug.prettyPrint (format_topEnv env)
  fun funEToString funE = 
      Bug.prettyPrint (format_funE funE)

  val emptyVarE = SymbolEnv.empty : varE
  val emptyTyE = SymbolEnv.empty : tyE
  val emptyEnv = ENV{varE=emptyVarE, tyE = emptyTyE, strE=STR SymbolEnv.empty}
  val emptyTopEnv = {Env=emptyEnv, FunE=SymbolEnv.empty, SigE=SymbolEnv.empty} : topEnv

(*
   find function : a function that find a definition from a reference.
                    The argument symbol is a reference occurrence.
   check function: a function looks up an env to check if there is an entry.
                   This symbol is not a refence occurrence.
   bind function: a function that binds a name in an environment.
                  The argument symbol is a definition occurrence.
   insert function: a function that insert an entry into an environment.
                   The argument symbol is a definition occurrence.
   xxxWithyyy: insert all elements in yyy into  xxx
   bindXxxWithYyy: bind all elenets in yyy into xxx.
*)

  (* find function *)
  fun findTstr (ENV {varE, tyE, strE = STR envSymbolEnvMap}, longsymbol) =
      case longsymbol of 
        nil => raise bug "*** nil to lookupTy *** "
      | symbol :: nil => 
        (case SymbolEnv.findi(tyE, symbol) of
           NONE => NONE
         | SOME (key, tstr) => SOME tstr
        )
      | strsymbol :: path =>
        (case SymbolEnv.findi(envSymbolEnvMap, strsymbol) of
           NONE => NONE
         | SOME (symbolInEnv, {env,...}) => findTstr (env, path)
        )

  (* find function *)
  exception LookupTstr
  fun lookupTstr env longsymbol : tstr =
      case findTstr (env, longsymbol) of 
        NONE => raise LookupTstr
      | SOME tstr => tstr


  (* check function *)
  fun checkTstr (ENV {varE, tyE, strE = STR envSymbolEnvMap}, longsymbol) =
      case longsymbol of 
        nil => raise bug "*** nil to lookupTy *** "
      | symbol :: nil => SymbolEnv.find(tyE, symbol) 
      | strsymbol :: path =>
        (case SymbolEnv.find(envSymbolEnvMap, strsymbol) of
           NONE => NONE
         | SOME {env,...} => checkTstr (env, path)
        )

  (* bind function *)
  fun rebindTstr (ENV{varE,tyE,strE}, symbol, tstr) =
      ENV
        {
         varE = varE,
         tyE = SymbolEnv.insert(tyE, symbol, tstr),
         strE = strE
        }

  (* bind function *)
  fun bindTstr (env, symbol, tstr) =
      let
        val ENV{varE, tyE, strE} = env
        val _ = 
            case SymbolEnv.find(tyE, symbol) of
              NONE => ()
            | SOME _ =>
              EU.enqueueError (Symbol.symbolToLoc symbol, E.DuplicateTypInSpec("055", symbol))
        val tyE = SymbolEnv.insert(tyE, symbol, tstr)
      in
        ENV {tyE=tyE, varE=varE, strE=strE}
      end

  (* insert function *)
  fun insertTstr (env, symbol, tstr) =
      let
        val ENV{varE, tyE, strE} = env
        val tyE =
            SymbolEnv.insertWithi
            (fn (symbol, _) =>
                (EU.enqueueError (Symbol.symbolToLoc symbol, E.DuplicateTypInSpec("055", symbol))))
            (tyE, symbol, tstr)
      in
        ENV {tyE=tyE, varE=varE, strE=strE}
      end

  (* insert function *)
  fun reinsertTstr (ENV{varE,tyE,strE}, symbol, tstr) =
      ENV
        {
         varE = varE,
         tyE = SymbolEnv.insert(tyE, symbol, tstr),
         strE = strE
        }

  (* bind function *)
  fun rebindTstrLongsymbol
        (ENV{varE, tyE, strE = strE as STR envMap},
         path, tstr) =
      case path of
        nil => raise bug "nil to rebindTypLongid"
      | symbol::nil =>
        ENV
          {
           varE = varE,
           tyE = SymbolEnv.insert(tyE, symbol, tstr),
           strE = strE
          }
      | strsymbol::path =>
        let
          val {env, strKind} = 
              case SymbolEnv.find(envMap, strsymbol) of
                SOME strEntry =>strEntry
              | NONE => raise bug "strenv not found in rebindStrLongsymbol"
          val newEnv = rebindTstrLongsymbol(env, path, tstr)
        in
          ENV
            {
             varE = varE,
             tyE = tyE,
             strE = 
             STR
               (SymbolEnv.insert
                  (envMap, strsymbol, {env=newEnv, strKind=strKind}))
            }
        end


  (* insert function *)
  fun reinsertTstrLongsymbol
        (ENV{varE, tyE, strE = strE as STR envMap},
         path, tstr) =
      case path of
        nil => raise bug "nil to rebindTypLongid"
      | symbol::nil =>
        ENV
          {
           varE = varE,
           tyE = SymbolEnv.insert(tyE, symbol, tstr),
           strE = strE
          }
      | strsymbol::path =>
        let
          val {env, strKind} = 
              case SymbolEnv.find(envMap, strsymbol) of
                SOME strEntry =>strEntry
              | NONE => raise bug "strenv not found in rebindStrLongsymbol"
          val newEnv = reinsertTstrLongsymbol(env, path, tstr)
        in
          ENV
            {
             varE = varE,
             tyE = tyE,
             strE = 
             STR
               (SymbolEnv.insert
                  (envMap, strsymbol, {env=newEnv, strKind=strKind}))
            }
        end


  (* find function *)
  fun findId (ENV {varE, tyE, strE = STR envSymbolEnvMap}, longsymbol) =
      case longsymbol of 
        nil => raise bug "nil to findId"
      | symbol :: nil => SymbolEnv.find(varE, symbol)
      | strsymbol :: path =>
        (case SymbolEnv.findi(envSymbolEnvMap, strsymbol) of
           NONE => NONE
         | SOME (smbolInEnv, {env,...}) => findId (env, path)
        )

  (* find function *)
  exception LookupId
  fun lookupId env longsymbol : I.idstatus =
      case findId(env, longsymbol) of
        NONE => raise LookupId
      | SOME idstatus => idstatus

  (* find function for those that returns an idstatus *)
  fun findCon (ENV {varE, tyE, strE = STR envSymbolEnvMap}, longsymbol) =
      case longsymbol of 
        nil => raise bug "nil to findCon"
      | symbol :: nil => 
        let
          val idstatus = SymbolEnv.find(varE, symbol)
        in
          case idstatus of
            (SOME (I.IDCON _)) => idstatus
          | (SOME (I.IDEXN _)) => idstatus
          | (SOME (I.IDEXNREP _)) => idstatus
          | (SOME (I.IDEXEXN (_, used))) => idstatus
          | (SOME (I.IDEXEXNREP (_, used))) => idstatus
          | NONE => NONE
          | (SOME (I.IDVAR _)) => NONE
          | (SOME (I.IDVAR_TYPED _)) => NONE
          | (SOME (I.IDEXVAR {used,...})) => NONE
          | (SOME (I.IDBUILTINVAR _)) => NONE
          | (SOME (I.IDOPRIM {used,...})) => NONE
          | (SOME (I.IDEXVAR_TOBETYPED _)) => raise bug "IDEXVAR_TOBETYPED to findCon"
          | (SOME (I.IDSPECVAR _)) => raise bug "IDSPECVAR to findCon"
          | (SOME (I.IDSPECEXN _)) => raise bug "IDSPECEXN to findCon"
          | (SOME (I.IDSPECCON _)) => raise bug "IDSPECCON to findCon"
        end
      | strsymbol :: path =>
        (case SymbolEnv.findi(envSymbolEnvMap, strsymbol) of
           NONE => NONE
         | SOME (smbolInEnv, {env,...}) => findCon (env, path)
        )

  (* check function *)
  fun checkId (ENV {varE, tyE, strE = STR envSymbolEnvMap}, longsymbol) =
      case longsymbol of 
        nil => raise bug "nil to findId"
      | symbol :: nil => SymbolEnv.find(varE, symbol)
      | strsymbol :: path =>
        (case SymbolEnv.find(envSymbolEnvMap, strsymbol) of
           NONE => NONE
         | SOME {env,...} => checkId (env, path)
        )

(*
  fun checkId (ENV {varE, tyE, strE = STR envSymbolEnvMap}, longsymbol) =
      case longsymbol of 
        nil => raise bug "nil to findCon"
      | symbol :: nil => 
        let
          val idstatus = SymbolEnv.find(varE, symbol)
        in
          case idstatus of
            NONE => true
          | (SOME (I.IDVAR _)) => true
          | (SOME (I.IDVAR_TYPED _)) => true
          | (SOME (I.IDEXVAR {used,...})) => true
          | (SOME (I.IDBUILTINVAR _)) => true
          | (SOME (I.IDCON _)) => false
          | (SOME (I.IDEXN _)) => false
          | (SOME (I.IDEXNREP _)) => false
          | (SOME (I.IDEXEXN (_, used))) => false
          | (SOME (I.IDEXEXNREP (_, used))) => false
          | (SOME (I.IDOPRIM {used,...})) => false
          | (SOME (I.IDEXVAR_TOBETYPED _)) => raise bug "IDEXVAR_TOBETYPED to findCon"
          | (SOME (I.IDSPECVAR _)) => raise bug "IDSPECVAR to findCon"
          | (SOME (I.IDSPECEXN _)) => raise bug "IDSPECEXN to findCon"
          | (SOME (I.IDSPECCON _)) => raise bug "IDSPECCON to findCon"
        end
      | strsymbol :: path => false
*)

  (* bind function *)
  fun rebindId (ENV{varE, tyE, strE}, symbol, idstatus) =
      ENV
        {varE = SymbolEnv.insert(varE, symbol, idstatus),
         tyE = tyE,
         strE = strE
        }

  (* bind function *)
  fun bindId (env, symbol, idstate) =
      let
        val ENV{varE, tyE, strE} = env
        val varE =
            SymbolEnv.insertWithi
              (fn (symbol,_) =>
                  (EU.enqueueError (Symbol.symbolToLoc symbol,E.DuplicateIdInSpec("054",symbol))))
              (varE, symbol, idstate)
      in
        ENV {varE=varE, tyE=tyE, strE=strE}
      end

  (* insert function *)
  fun reinsertId (ENV{varE, tyE, strE}, symbol, idstatus) =
      ENV
        {varE = SymbolEnv.insert(varE, symbol, idstatus),
         tyE = tyE,
         strE = strE
        }


  (* indsert function *)
  fun insertId (env, symbol, idstate) =
      let
        val ENV{varE, tyE, strE} = env
        val varE =
            SymbolEnv.insertWithi
              (fn (symbol,_) =>
                  (EU.enqueueError (Symbol.symbolToLoc symbol,E.DuplicateIdInSpec("054",symbol))))
              (varE, symbol, idstate)
      in
        ENV {varE=varE, tyE=tyE, strE=strE}
      end

  (* bind function *)
  fun rebindIdLongsymbol
        (ENV{varE, tyE, strE = strE as STR envMap},
         path, idstatus) : env =
      case path of
        nil => raise bug "nil to rebindTypLongid"
      | symbol::nil =>
        ENV
          {
           varE = SymbolEnv.insert(varE, symbol, idstatus),
           tyE = tyE,
           strE = strE
          }
      | strsymbol::path =>
        let
          val {env, strKind} = 
              case SymbolEnv.find(envMap, strsymbol) of
                SOME strEntry => strEntry
              | NONE => raise bug "env not found in rebindIdLongsymbol"
          val newEnv = rebindIdLongsymbol(env, path, idstatus)
        in
          ENV
            {
             varE = varE,
             tyE = tyE,
             strE = 
             STR (SymbolEnv.insert
                    (envMap, 
                     strsymbol, 
                     {env=newEnv, strKind=strKind}))
            }
        end

  (* insert function *)
  fun reinsertIdLongsymbol
        (ENV{varE, tyE, strE = strE as STR envMap},
         path, idstatus) : env =
      case path of
        nil => raise bug "nil to rebindTypLongid"
      | symbol::nil =>
        ENV
          {
           varE = SymbolEnv.insert(varE, symbol, idstatus),
           tyE = tyE,
           strE = strE
          }
      | strsymbol::path =>
        let
          val {env, strKind} = 
              case SymbolEnv.find(envMap, strsymbol) of
                SOME strEntry => strEntry
              | NONE => raise bug "env not found in rebindIdLongsymbol"
          val newEnv = reinsertIdLongsymbol(env, path, idstatus)
        in
          ENV
            {
             varE = varE,
             tyE = tyE,
             strE = 
             STR (SymbolEnv.insert
                    (envMap, 
                     strsymbol, 
                     {env=newEnv, strKind=strKind}))
            }
        end

  (* find function *)
  fun findStr (ENV {varE, tyE, strE = STR strMap}, longsymbol) = 
      case longsymbol of 
          nil => raise bug "nil to lookupStrId"
        | symbol :: nil =>  SymbolEnv.find(strMap, symbol) 
        | strsymbol :: path =>
          (case SymbolEnv.findi(strMap, strsymbol) of
             NONE => NONE
           | SOME (symbolInEnv, {env,...}) => 
             findStr (env, path)
          )

  (* find function *)
  exception LookupStr
  fun lookupStr env longsymbol = 
      case findStr (env, longsymbol) of
        NONE => raise LookupStr
      | SOME strEntry => strEntry

  (* find function *)
  fun checkStr (ENV {varE, tyE, strE = STR strMap}, longsymbol) = 
      case longsymbol of 
          nil => raise bug "nil to lookupStrId"
        | symbol :: nil =>  SymbolEnv.find(strMap, symbol) 
        | strsymbol :: path =>
          (case SymbolEnv.find(strMap, strsymbol) of
             NONE => NONE
           | SOME {env,...} => 
             checkStr (env, path)
          )

  (* bind function *)
  fun rebindStr (ENV{varE,tyE,strE=STR envMap}, symbol, {strKind, env=strEnv}) =
      ENV {varE = varE,
           tyE = tyE,
           strE = STR (SymbolEnv.insert(envMap, symbol, {strKind=strKind, env=strEnv}))
          }

  (* bind function *)
  fun bindStr (ENV{varE, tyE, strE = STR envMap}, symbol, {strKind, env=strEnv}) =
      let
        val envMap =
            case SymbolEnv.findi(envMap, symbol) of
              NONE => SymbolEnv.insert(envMap, symbol, {strKind=strKind, env=strEnv})
            | SOME (symbol, _) => 
              (EU.enqueueError (Symbol.symbolToLoc symbol, E.DuplicateIdInSpec("050", symbol));
               envMap
              )
      in
        ENV {varE=varE, tyE=tyE, strE=STR envMap}
      end

  (* insert function *)
  fun reinsertStr (ENV{varE,tyE,strE=STR envMap}, symbol, {strKind, env=strEnv}) =
      ENV {varE = varE,
           tyE = tyE,
           strE = STR (SymbolEnv.insert(envMap, symbol, {strKind=strKind, env=strEnv}))
          }

  (* insert function *)
  fun insertStr (ENV{varE, tyE, strE = STR envMap}, symbol, {strKind, env=strEnv}) =
      let
        val envMap =
            case SymbolEnv.findi(envMap, symbol) of
              NONE => SymbolEnv.insert(envMap, symbol, {strKind=strKind, env=strEnv})
            | SOME (symbol, _) => 
              (EU.enqueueError (Symbol.symbolToLoc symbol, E.DuplicateIdInSpec("050", symbol));
               envMap
              )
      in
        ENV {varE=varE, tyE=tyE, strE=STR envMap}
      end

  (* bind function *)
  fun singletonStr (symbol, strEntry) = rebindStr(emptyEnv, symbol, strEntry)

  (* insert function *)
  fun varEWithVarE (varE1, varE2) = 
      SymbolEnv.unionWith #2 (varE1, varE2)

  (* bind functions *)
  fun bindVarEWithVarE (varE1, varE2) = 
      SymbolEnv.unionWithi3
        preferSecond
        (varE1, varE2)

  (* insert functions *)
  fun tyEWithTyE (tyE1, tyE2) = 
      SymbolEnv.unionWith #2 (tyE1, tyE2)

  (* binding functions *)
  fun bindTyEWithTyE (tyE1, tyE2) = 
      SymbolEnv.unionWithi3
        preferSecond
        (tyE1, tyE2)

  (* insert functions *)
  fun strEWithStrE (STR envMap1, STR envMap2) = 
      STR (SymbolEnv.unionWith #2 (envMap1, envMap2))

  (* binding functions *)
  fun bindStrEWithStrE (STR envMap1, STR envMap2) = 
      STR (SymbolEnv.unionWithi3
             preferSecond
             (envMap1, envMap2)
          )

  (* insert function *)
  fun envWithVarE (ENV {varE, strE, tyE}, varE1 : I.varE) =
      ENV {varE = varEWithVarE (varE, varE1),
           strE = strE,
           tyE = tyE}

  (* bind functions *)
  fun bindEnvWithVarE (ENV {varE, strE, tyE}, varE1 : I.varE) =
      ENV {varE = bindVarEWithVarE (varE, varE1),
           strE = strE,
           tyE = tyE}

  (* insert function *)
  fun envWithEnv (ENV {varE=varE1, strE=strE1, tyE=tyE1},
                  ENV {varE=varE2, strE=strE2, tyE=tyE2}) =
      ENV {varE = varEWithVarE (varE1, varE2),
           strE = strEWithStrE (strE1, strE2),
           tyE = tyEWithTyE (tyE1,tyE2)
          }

  (* bind function *)
  fun bindEnvWithEnv (ENV {varE=varE1, strE=strE1, tyE=tyE1},
                      ENV {varE=varE2, strE=strE2, tyE=tyE2}) =
      ENV {varE = bindVarEWithVarE (varE1, varE2),
           strE = bindStrEWithStrE (strE1, strE2),
           tyE = bindTyEWithTyE (tyE1,tyE2)
          }

  (* insert function *)
  fun updateStrE (STR envMap1, STR envMap2) = 
      let
        fun strEWithStrE ({env=env1, strKind}, 
                          {env=env2, strKind=_}) =
            {env=updateEnv(env1,env2), strKind=strKind}
      in
        STR (SymbolEnv.unionWith strEWithStrE (envMap1, envMap2))
      end

  (* insert function *)
  and updateEnv (ENV {varE=varE1, strE=strE1, tyE=tyE1},
                  ENV {varE=varE2, strE=strE2, tyE=tyE2}) =
      ENV {varE = varEWithVarE (varE1, varE2),
           strE = updateStrE (strE1, strE2),
           tyE = tyEWithTyE (tyE1,tyE2)
          }

  (* insert function *)
  fun sigEWithSigE (sigE1, sigE2) =
      SymbolEnv.foldli
      (fn (symbol, entry, sigE1) => SymbolEnv.insert(sigE1, symbol, entry))
      sigE1
      sigE2

  (* bind function *)
  fun bindSigEWithSigE (sigE1, sigE2) =
      SymbolEnv.foldli
      (fn (symbol, entry, sigE1) => 
          SymbolEnv.insert(sigE1, symbol, entry))
      sigE1
      sigE2

  (* find function *)
  fun findFunETopEnv ({Env, FunE, SigE}, symbol) =
      SymbolEnv.find(FunE, symbol) 

  (* check function *)
  fun checkFunETopEnv ({Env, FunE, SigE}, symbol) =
      SymbolEnv.find(FunE, symbol) 

  (* bind function *)
  fun rebindFunE (FunE, symbol, funEEntry) =
      SymbolEnv.insert(FunE, symbol, funEEntry) 

  (* insert function *)
  fun reinsertFunE (FunE, symbol, funEEntry) =
      SymbolEnv.insert(FunE, symbol, funEEntry) 


  (* insert function *)
  fun funEWithFunE (funE1, funE2) =
      SymbolEnv.foldli
      (fn (symbol, entry, funE1) => SymbolEnv.insert(funE1, symbol, entry))
      funE1
      funE2

  (* insert function *)
  fun bindFunEWithFunE (funE1, funE2) =
      SymbolEnv.foldli
      (fn (symbol, entry, funE1) => SymbolEnv.insert(funE1, symbol, entry))
      funE1
      funE2

  (* find function *)
  fun findSigETopEnv ({Env, FunE, SigE}, symbol) =
      SymbolEnv.find(SigE, symbol) 

  (* check function *)
  fun checkSigETopEnv ({Env, FunE, SigE}, symbol) =
      SymbolEnv.find(SigE, symbol) 

  (* bind function *)
  fun rebindSigE (SigE, symbol, env) =
      SymbolEnv.insert(SigE, symbol, env) 

  (* insert function *)
  fun reinsertSigE (SigE, symbol, env) =
      SymbolEnv.insert(SigE, symbol, env) 

  (* insert function *)
  fun topEnvWithSigE ({Env, FunE, SigE}, sige) : topEnv =
      {Env = Env,
       FunE = FunE,
       SigE = sigEWithSigE (SigE, sige)
      }

  (* bind function *)
  fun bindTopEnvWithSigE ({Env, FunE, SigE}, sige) : topEnv =
      {Env = Env,
       FunE = FunE,
       SigE = bindSigEWithSigE (SigE, sige)
      }

  (* insert function *)
  fun topEnvWithFunE ({Env, FunE, SigE}, funE) : topEnv =
      {Env = Env,
       FunE = funEWithFunE (FunE, funE),
       SigE = SigE
      }

  (* bind function *)
  fun bindTopEnvWithFunE ({Env, FunE, SigE}, funE) : topEnv =
      {Env = Env,
       FunE = funEWithFunE (FunE, funE),
       SigE = SigE
      }

  (* insert function *)
  fun topEnvWithEnv ({Env, FunE, SigE}, env1) : topEnv =
      {Env = envWithEnv (Env, env1), FunE = FunE, SigE = SigE}

  (* bind function *)
  fun bindTopEnvWithEnv ({Env, FunE, SigE}, env1) : topEnv =
      {Env = envWithEnv (Env, env1), FunE = FunE, SigE = SigE}

  (* insert function *)
  fun topEnvWithTopEnv
        ({Env=env1,FunE=funE1,SigE=sige1},{Env=env2,FunE=funE2,SigE=sige2})
      : topEnv
      =
      {Env = envWithEnv (env1, env2),
       FunE = funEWithFunE (funE1, funE2),
       SigE = sigEWithSigE (sige1, sige2)
      }

  (* bind function *)
  fun bindTopEnvWithTopEnv
        ({Env=env1,FunE=funE1,SigE=sige1},{Env=env2,FunE=funE2,SigE=sige2})
      : topEnv
      =
      {Env = bindEnvWithEnv (env1, env2),
       FunE = bindFunEWithFunE (funE1, funE2),
       SigE = bindSigEWithSigE (sige1, sige2)
      }

(* --------------------------------------------------------------------------------
 *)

  fun replaceLocTyE loc tyE =
      SymbolEnv.mapi2 
      (fn (symbol, tstr) =>
          (Symbol.replaceLocSymbol loc symbol, tstr))
      tyE

  fun replaceLocVarE loc varE =
      SymbolEnv.mapi2
      (fn (symbol, idstatus) =>
          (Symbol.replaceLocSymbol loc symbol, idstatus))
      varE
          
  fun replaceLocStrEntry loc {env, strKind} =
      {env = replaceLocEnv loc env, strKind = strKind}

  and replaceLocEnv loc (ENV {varE, tyE, strE}) =
      ENV {varE = replaceLocVarE loc varE,
           tyE =  replaceLocTyE loc tyE,
           strE = replaceLocStrE loc strE}

  and replaceLocStrE loc (STR strentryMap) =
      STR (SymbolEnv.mapi2 
             (fn (symbol, strEntry) =>
                 (Symbol.replaceLocSymbol loc symbol, 
                  replaceLocStrEntry loc strEntry))
             strentryMap)

  fun unionVarE code (varE1, varE2) =
      SymbolEnv.unionWithi2
        (fn ((symbol1, v1), (symbol2,v2)) =>
            (EU.enqueueError 
               (Symbol.symbolToLoc symbol2, 
                E.DuplicateVar(code ^ "v", symbol2));
             (symbol2, v2))
        )
        (varE1, varE2)

  fun unionTyE code (tyE1, tyE2) =
      SymbolEnv.unionWithi2
        (fn ((symbol1,v1), (symbol2,v2)) =>
            (EU.enqueueError
               (Symbol.symbolToLoc symbol2, 
                E.DuplicateTypName(code ^ "v", symbol2)); 
             (symbol2, v2))
        )
        (tyE1, tyE2)
            
  fun unionStrE code (STR map1, STR map2) =
      STR
        (
         SymbolEnv.unionWithi2
           (fn ((symbol1,v1), (symbol2,v2)) =>
               (EU.enqueueError
                  (Symbol.symbolToLoc symbol2, 
                   E.DuplicateStrName(code ^ "v", symbol2)); 
                (symbol2, v2))
           )
           (map1, map2)
        )
            
  fun unionFunE code (funE1, funE2) =
      SymbolEnv.unionWithi2
        (fn ((symbol,v1),(symbol2,v2)) =>
            (EU.enqueueError
               (Symbol.symbolToLoc symbol2, 
                E.DuplicateFunctor(code ^ "f", symbol2));
             (symbol2, v2))
        )
      (funE1, funE2)

  fun unionSigE code (sigE1, sigE2) =
      SymbolEnv.unionWithi2
        (fn ((symbol1,v1),(symbol2,v2)) =>
            (EU.enqueueError
               (Symbol.symbolToLoc symbol2, 
                E.DuplicateSigname(code ^ "s", symbol2));
             (symbol2,v2))
        )
        (sigE1, sigE2)

  fun unionEnv code (ENV {varE=varE1, strE=strE1, tyE=tyE1},
                     ENV {varE=varE2, strE=strE2, tyE=tyE2})
      =
      let
        val varE = unionVarE code (varE1, varE2)
        val tyE = unionTyE code (tyE1, tyE2)
        val strE = unionStrE code (strE1, strE2)
      in
        ENV{varE=varE, strE=strE, tyE=tyE}
      end

  fun unionTopEnv code
        ({Env=env1,FunE=funE1,SigE=sige1},{Env=env2,FunE=funE2,SigE=sige2})
      : topEnv
      =
      {Env = unionEnv code (env1, env2),
       FunE = unionFunE code (funE1, funE2),
       SigE = unionSigE code (sige1, sige2)
      }

(*
  val conEnv = ref (BuiltinTypes.builtinConEnv())
  fun conEnvAdd (id, conInfo) = 
      conEnv := ConID.Map.insert(!conEnv, id, conInfo)
  fun conEnvFind id = 
      case ConID.Map.find(!conEnv, id) of
        SOME conInfo => conInfo
      | NONE => raise bug "conid not found in conEnv"
*)

  datatype exnCon = EXN of I.exnInfo | EXEXN of I.exInfo

  structure ExnConOrd =
  struct
    type ord_key = exnCon
    fun compare (exncon1, exncon2) =
        case (exncon1, exncon2) of
          (EXN _, EXEXN _) => LESS
        | (EXEXN _, EXN _) => GREATER
        | (EXN {id=id1,...}, EXN {id=id2, ...})  => ExnID.compare(id1,id2)
        | (EXEXN {longsymbol=longsymbol1,...}, 
           EXEXN {longsymbol=longsymbol2,...})  =>
          let
            val string1 = Symbol.longsymbolToString longsymbol1
            val string2 = Symbol.longsymbolToString longsymbol2
          in
            String.compare(string1, string2)
          end
  end
  structure ExnConSet = BinarySetFn(ExnConOrd)
  val exnConSetRef = ref ExnConSet.empty
  fun exnConAdd exnCon = 
      exnConSetRef := ExnConSet.add (!exnConSetRef, exnCon)
  fun exnConList () = ExnConSet.listItems (!exnConSetRef)
  fun intExnConList () = exnConSetRef := ExnConSet.empty
end
end
